language: node_js
dist: trusty
node_js:
  - v10
cache:
  yarn: true
  directories:
  - ~/.npm

before_install:
  - START_TIME=$(date +%s)
  - "export DISPLAY=:99.0"
  - "/sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1920x1080x16"
  - curl -o- -L https://yarnpkg.com/install.sh | bash -s --
  - export PATH="$HOME/.yarn/bin:$PATH"

install: yarn

before_script:
  - |
    if [ -z "${METAMASK_NETWORK+x}" ]; then
      export METAMASK_SECRET="cotton trap squeeze wealth aunt fork hungry notice entry early combine chalk"
      export METAMASK_NETWORK=l
      export GANACHE_NETWORK=100000015
    fi
  - |
    if [ "${METAMASK_NETWORK:0:1}" = "l" ]; then
      PROJECT_PATH="$(pwd)"
      MIGRATION_LOG="$PROJECT_PATH/migration.log"
      GANACHE_LOG="$PROJECT_PATH/ganache.log"
    GANACHE_DB="/tmp/ganache.db"
      export GANACHE_PORT=8080
      git clone --depth=1 --branch=master https://github.com/PolymathNetwork/polymath-core.git polymath-core
      cd polymath-core
      nvm install v8
      npm install -g truffle
      npm install
      rm -rf "$GANACHE_PORT"
      mkdir -p "$GANACHE_PORT"
      ganache-cli -i $GANACHE_NETWORK -l 9000000 -m "$METAMASK_SECRET" --db "$GANACHE_DB" -p $GANACHE_PORT &> "$GANACHE_LOG" &
      GANACHE_PID=$!
      sh -c 'tail -n +0 -f "$GANACHE_LOG" | { sed "/Listening on/ q" && kill $$ ;}'
      export GANACHE_CONTRACTS="{"$(truffle migrate --reset --all --network development | tee "$MIGRATION_LOG" | sed  -e "1,/^Using network \'.*\'.$/ d; /----- Polymath Core Contracts -----/,\$d; /^[^:]*$/ d; /^.*\.js$/ d; s/^ *\([^:]*\): *\([^ ]*\) *$/ \"\1\" : { \"$GANACHE_NETWORK\" : \"\2\" }/g" | tr '\n' ', ' | sed 's/,$//')" }"
      cat "$MIGRATION_LOG"
      nvm use v10
      cd "$PROJECT_PATH"
    fi

script: npm test -- --env=production --params.tags=@status

after_script:
  - |
    if [ "${GANACHE_PID+x}" ]; then
      kill -9 $GANACHE_PID
      cat "$GANACHE_LOG"
    fi
  - |
    END_TIME=$(date +%s)
    ELAPSED=$(($END_TIME - $START_TIME))
    JOB_EXPECTED_TIME=$((60 * 10))
    # We can trigger scripts maximum 10 times per hour
    if [[ $ELAPSED < $JOB_EXPECTED_TIME ]]; then
      TIMELEFT=$((JOB_EXPECTED_TIME - $ELAPSED))
      echo "Waiting $TIMELEFT seconds to trigger the next job..."
      sleep $TIMELEFT
    fi;
  - bash trigger.sh

notifications:
  email:
    - josep@polymath.network